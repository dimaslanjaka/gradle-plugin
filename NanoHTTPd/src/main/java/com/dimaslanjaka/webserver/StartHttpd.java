/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.dimaslanjaka.webserver;

import javax.swing.*;
import java.io.IOException;
import java.net.Socket;
import java.util.concurrent.ExecutorService;

public class StartHttpd {
	protected static ExecutorService threadPool;
	static NanoHTTPd server = null;
	static ServerTask task;

	public static void run() {
		ServerTask task = new ServerTask(1900000);
		task.execute();
	}

	public static void loopStart() throws InterruptedException {
		while (true) {
			Thread.sleep(500);
		}
	}

	public static void main(String[] args) {
		run();
	}

	/**
	 * Checks to see if a specific port is available.
	 *
	 * @param port the port to check for availability
	 */
	public static boolean available(int port) {
		try (Socket ignored = new Socket("localhost", port)) {
			return false;
		} catch (IOException ignored) {
			return true;
		}
	}

	public static class ServerTask extends
					SwingWorker<Boolean, Integer> {
		boolean enough = false;
		private Integer milliseconds = 0;
		private int millisecondsMax = 100;

		ServerTask(int millisecondsToMax) {
			millisecondsMax = millisecondsToMax;
		}

		@Override
		public Boolean doInBackground() {
			System.out.println("Background Running");
			runServer();
			while (!enough && !isCancelled()) {
				milliseconds += 1;
				publish(milliseconds);
				setProgress(100 * milliseconds / millisecondsMax);
			}
			return true;
		}

		void runServer() {
			try {
				int port = 8500;
				if (available(port)) {
					System.out.println(port + " Available, Running Server");
					server = new NanoHTTPd(port);
					server.println("Server Running On: " + server.hostname + ":" + server.myTcpPort);
				}
			} catch (IOException ioe) {
				System.err.println("Couldn't start server:\n" + ioe);
			}
		}

		void changeMax(int n) {
			if (n != millisecondsMax) millisecondsMax = n;
		}
	}
}
