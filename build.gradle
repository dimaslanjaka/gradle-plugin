buildscript {
    repositories {
        maven {
            url "http://maven2.javacpp.googlecode.com/git/"
        }
        maven {
            url "http://maven2.javacv.googlecode.com/git/"
        }
        mavenCentral()
        mavenLocal()
        jcenter()
        google()
        gradlePluginPortal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven { url "http://esd4j.org/jabylon/repository/" }
        maven { url "http://nexus.openolat.org/nexus/content/repositories/public/" }
        maven { url "https://jitpack.io" }
        maven {
            url "https://oss.sonatype.org/content/repositories/releases/"
        }
        maven {
            url "https://jetbrains.bintray.com/intellij-plugin-service"
        }
        maven { url "http://esd4j.org/jabylon/repository/" }
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
    }
    dependencies {
        //classpath "eu.davidea:grabver:latest.release"
        classpath "com.android.tools.build:gradle:4.0.2"
        classpath "com.gradle.publish:plugin-publish-plugin:latest.release"
        classpath "org.grails:grails-gradle-plugin:latest.release"
        //classpath 'commons-net:commons-net:3.7.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        //classpath "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        //classpath("org.jetbrains.dokka:dokka-gradle-plugin:${kotlin_version}")
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'kotlin'
apply from: 'clean.gradle'
apply from: 'ide.gradle'
apply from: 'publish.gradle'

repositories {
    mavenCentral()
    mavenLocal()
    google()
    jcenter()
    gradlePluginPortal()

    // External Repo
    maven { url "http://esd4j.org/jabylon/repository/" }
    maven { url "http://nexus.openolat.org/nexus/content/repositories/public/" }
    maven { url "https://jitpack.io" }
    maven {
        url "https://oss.sonatype.org/content/repositories/releases/"
    }
    maven {
        url "https://jetbrains.bintray.com/intellij-plugin-service"
    }
    maven { url "http://esd4j.org/jabylon/repository/" }
}

configurations {
    thirdparty
    jarjar
    providedRuntime
    providedRuntimeOnly
    testImplementation.extendsFrom compileOnly

    all {
        resolutionStrategy {
            eachDependency { DependencyResolveDetails details ->
                ModuleVersionSelector requested = details.requested
                if (requested.group == "org.jetbrains.kotlin") {
                    // TODO: force kotlin use same version
                    details.useVersion(kotlin_version as String)
                } else if (requested.group == "org.slf4j") {
                    details.useVersion("1.7.20")
                } else if (requested.group == "com.github.kittinunf.fuel") {
                    details.useVersion("2.3.0")
                } else {
                    // TODO: Force Dependencies to latest version
                    //details.useVersion("latest.release")
                }
                //println("${requested.name} use version ${details.getRequested().version}")
            }
            preferProjectModules()
        }
    }
}

task collectJars(type: Copy) {
    into "$buildDir/output/copies"
    from configurations.compile
}

test {
    enabled = true
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

dependencies {
    testImplementation 'junit:junit:4.13'
    compile 'io.swagger:swagger-annotations:1.5.15'
    compile 'com.squareup.okhttp:okhttp:2.7.5'
    compile 'com.squareup.okhttp:logging-interceptor:2.7.5'
    compile 'com.google.code.gson:gson:2.8.1'
    compile 'joda-time:joda-time:2.9.9'
    compile group: 'commons-net', name: 'commons-net', version: '3.7.2'

    testCompile "org.hamcrest:hamcrest-core:2.2"   // only necessary if Hamcrest matchers are used
    testRuntime "net.bytebuddy:byte-buddy:1.10.10" // allows mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:3.1"
    // allows mocking of classes without default constructor (together with ByteBuddy or CGLIB)

    // Repackage section
    implementation fileTree("build/artifactory")
    implementation gradleApi()
    implementation localGroovy()
    implementation gradleTestKit()
    jarjar "org.gradle.jarjar:jarjar:latest.release"
    thirdparty "org.apache.maven:maven-model-builder:latest.release"
    thirdparty fileTree("${rootDir}/lib")

    // Javax Family
    compile "javax.xml.bind:jaxb-api:latest.release"
    compile "javax.activation:activation:latest.release"
    /*
    compile "com.sun.xml.bind:jaxb-impl:latest.release"
    compile "com.sun.xml.bind:jaxb-core:latest.release"
    compile "com.sun.xml.ws:rt:latest.release"
    compile "com.sun.xml.ws:jaxws-rt:latest.release"
     */

    // Apache
    implementation "org.apache.httpcomponents:httpclient:latest.release"
    implementation "org.apache.commons:commons-collections4:latest.release"
    implementation "org.apache.commons:commons-lang3:latest.release"
    implementation "org.apache.commons:commons-compress:latest.release"
    implementation "org.apache.commons:commons-exec:latest.release"
    implementation "org.apache.commons:commons-math3:latest.release"
    implementation "commons-codec:commons-codec:latest.release"
    implementation "commons-net:commons-net:latest.release"
    implementation "commons-validator:commons-validator:latest.release"
    implementation "commons-io:commons-io:latest.release"
    implementation "commons-cli:commons-cli:latest.release"
    implementation "xerces:xercesImpl:latest.release"

    // Mail
    implementation "javax.mail:mail:1.4.1"

    // CSV
    implementation "au.com.bytecode:opencsv:2.4"

    // Time Unit
    implementation "joda-time:joda-time:2.10.6"

    // Git
    implementation "org.eclipse.jgit:org.eclipse.jgit:latest.release"

    // Android provider source
    implementation "com.squareup:javapoet:1.10.0"
    implementation "com.squareup:kotlinpoet:1.6.0"
    implementation("com.squareup.okio:okio:2.9.0")
    implementation("com.squareup.moshi:moshi-kotlin:1.11.0")
    implementation("com.squareup.okhttp3:okhttp:4.9.0")
    testImplementation("com.squareup.okhttp3:mockwebserver:4.9.0")
    implementation "com.squareup.wire:wire-runtime:3.4.0"
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    compileOnly("com.android.tools.build:gradle:latest.release")

    // Fuel Http
    implementation("com.github.kittinunf.fuel:fuel:2.3.0")
    implementation("com.github.kittinunf.fuel:fuel-gson:2.3.0")
    implementation("com.github.kittinunf.fuel:fuel-rxjava:2.3.0")
    implementation("com.github.kittinunf.fuel:fuel-coroutines:2.3.0")
    implementation("com.github.kittinunf.fuel:fuel-android:2.3.0")
    implementation("com.github.kittinunf.fuel:fuel-stetho:2.3.0")

    // XML
    implementation 'org.jdom:jdom:latest.release'

    // JSON
    implementation "com.fasterxml.jackson.core:jackson-databind:latest.release"
    thirdparty "com.googlecode.json-simple:json-simple:latest.release"
    implementation "com.google.code.gson:gson:latest.release"
    compile 'org.json:json:latest.release'

    // html parser
    implementation "org.jsoup:jsoup:latest.release"

    // groovy
    implementation "org.codehaus.groovy:groovy-all:latest.release"
    testImplementation "org.codehaus.groovy:groovy-all:latest.release"

    implementation "args4j:args4j:latest.release"
    implementation 'org.jetbrains:annotations:latest.release'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:latest.release'

    // JUnit 5
    testImplementation(platform("org.junit:junit-bom:5.7.0"))
    testImplementation("org.junit.jupiter:junit-jupiter")
    // Use JUnit Jupiter API for testing.
    testImplementation('org.junit.jupiter:junit-jupiter-api')

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
    // other
    testImplementation gradleTestKit()
    // using spock framework this version to avoid complcation of groovy
    testImplementation("org.spockframework:spock-core:1.3-groovy-2.5") {
        exclude module: "groovy-all"
        exclude group: "org.codehaus.groovy"
    }
    testImplementation "net.bytebuddy:byte-buddy:1.10.1"
    testImplementation "org.objenesis:objenesis:3.1"
    testImplementation "commons-io:commons-io:2.6"
    testImplementation "org.robolectric:robolectric:4.4"
}

// compatibility
sourceCompatibility = "1.8"
targetCompatibility = "1.8"
compileJava.options.fork = true

// repackage jar
task repackageDependencies(type: Jar) {
    enabled = true
    baseName 'repack'
    version 'fixed'
    destinationDirectory = file("build/artifactory")

    doLast {
        project.ant {
            taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask", classpath: configurations.jarjar.asPath
            jarjar(destfile: archivePath) {
                configurations.thirdparty.each { originalJar ->
                    zipfileset(src: originalJar)
                }

                rule(pattern: "nu.**", result: "com.dimaslanjaka.gradle.repackaged.nu.@1")
                rule(pattern: "org.**", result: "com.dimaslanjaka.gradle.repackaged.org.@1")
                rule(pattern: "com.**", result: "com.dimaslanjaka.gradle.repackaged.com.@1")
                rule(pattern: "licenses.**", result: "com.dimaslanjaka.gradle.repackaged.licenses.@1")
            }
        }
    }
}

// Create a list of subprojects that you wish to include in the jar.
def mainProjects = []
subprojects.collect {
    mainProjects[] = ":${it.name}"
}
task oneJar(type: Jar, dependsOn: mainProjects.collect { it + ":compileJava" }) {
    enabled = true
    baseName 'all'
    version 'fixed'
    destinationDirectory = file("$buildDir/jar")
    from files(mainProjects.collect {
        project(it).sourceSets.main.output
    }) {
        exclude 'META-INF', 'META-INF/**'
    }
}

// single jar builder
jar {
    //reset actions
    //actions = []

    dependsOn oneJar
    dependsOn repackageDependencies

    from(zipTree(repackageDependencies.archivePath)) {
        include "**"
        exclude 'META-INF', 'META-INF/**'
    }
    from(zipTree(oneJar.archivePath)) {
        include "**"
        exclude 'META-INF', 'META-INF/**'
    }
    //from sourceSets.main.allJava
    from sourceSets.main.output
    //from sourceSets.main.allSource

    enabled = true
    baseName "gradle-plugin"
    version = project.getVersion()
    destinationDirectory = file("$buildDir/libs")

    manifest {
        attributes(
                "Created-By": "${System.properties["java.version"]} (${System.properties["java.vendor"]} ${System.properties["java.vm.version"]})".toString(),
                "Implementation-Title": "Automatic Gradle Plugin",
                "Implementation-Version": project.version,
                "Implementation-Vendor": "Dimas Lanjaka",
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
        )
    }
}
jar.dependsOn(subprojects.tasks['classes'])

// create jar with all dependecies (fatjar)
task compileWithDependencies(type: Jar) {
    enabled = true
    dependsOn jar
    baseName 'fat-jar'
    version 'fixed'
    from(configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    from(zipTree(jar.archivePath)) {
        include "**"
        exclude 'META-INF', 'META-INF/**'
    }
    destinationDirectory = file("$buildDir/libs")
}

compileJava {
    dependsOn "repackageDependencies"
    classpath += files(compileGroovy.destinationDir)
    classpath += files(compileKotlin.destinationDir)
}
compileKotlin {
    classpath += files(compileGroovy.destinationDir)
    classpath += files(compileJava.destinationDir)
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileGroovy {
    options.encoding = "UTF-8"
    dependsOn tasks.getByPath("compileKotlin")
    classpath += files(compileKotlin.destinationDir)
    classpath += files(compileJava.destinationDir)
}
compileTestGroovy {
    dependsOn tasks.getByPath("compileTestKotlin")
    classpath += files(compileTestKotlin.destinationDir)
}

classes.dependsOn compileKotlin


