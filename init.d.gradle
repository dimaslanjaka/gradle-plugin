import org.gradle.internal.logging.text.StyledTextOutputFactory
import java.text.SimpleDateFormat
import java.time.LocalDate
import java.time.ZoneId

import static org.gradle.internal.logging.text.StyledTextOutput.Style

// set default color terminal
System.setProperty("org.gradle.color.failure", "RED")
System.setProperty("org.gradle.color.progressstatus", "YELLOW")
System.setProperty("org.gradle.color.success", "GREEN")
def out = services.get(StyledTextOutputFactory).create("colored-test-output")
out.style(Style.Normal)

def success = {
    String messages ->
        ConsoleColors.success(messages)
        //println()
}
def error = {
    String messages ->
        ConsoleColors.error(messages)
        //println()
}
def warn = {
    String messages ->
        ConsoleColors.warning(messages)
        //println()
}

def buildTime = {
    def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'")
    df.setTimeZone(TimeZone.getTimeZone('UTC'))
    return df.format(new Date()).toString()
}
def getMonthAsInt = {
    Date date ->
        LocalDate localDate = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate()
        int month = localDate.getMonthValue()
        return month
}

def userHome = new File(System.properties['user.home'].toString())
def reposDir = new File(userHome, '.m2/repository')

def repos = new ArrayList()
reposDir.eachDir { repos.add(it) }
repos.sort()
def homedir = gradle.gradleHomeDir
def version = gradle.gradleVersion
def cacheDir = new File(userHome, '/.gradle/caches')
//cacheDir.deleteOnExit()

//delete gradle log
def gradle = getGradle()
def currentGradleHomeDir = gradle.getGradleUserHomeDir().getAbsolutePath()
def currentGradleVersion = gradle.getGradleVersion()
new File("${currentGradleHomeDir}/daemon/${currentGradleVersion}").listFiles().each {
    if (it.getName().endsWith('.out.log')) {
        error("Deleting gradle log file: $it") // Optional debug output
        it.delete()
    }
}

initscript {
    ext {
        userHome = new File(System.properties['user.home'].toString())
        reposDir = new File(userHome, '.m2/repository')
        offlineRepositoryRoot = reposDir.absolutePath
    }
    userHome = new File(System.properties['user.home'].toString())
    reposDir = new File(userHome, '.m2/repository')
    offlineRepositoryRoot = reposDir.absolutePath

    repositories {
        jcenter()
        google()
        mavenCentral()
        mavenLocal()
        gradlePluginPortal()
        flatDir {
            dirs "$gradleHomeDir/libs"
            //dirs "$rootProject.projectDir/libs"
        }
        maven { url 'https://maven.google.com' }
        maven { url 'https://maven.mozilla.org/maven2/' }
        maven { url 'https://jitpack.io' }
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'http://maven.springframework.org/release' }
        maven { url 'http://maven.restlet.org' }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
        maven {
            url "https://maven.pkg.github.com/dimaslanjaka/gradle-plugin"
            credentials {
                username = "dimaslanjaka"
                password = "d98acb59134fabab05145ddeb7abe4441db18b4a"
            }
        }
        maven { url 'https://repo1.maven.org/maven2' }
        maven {
            url offlineRepositoryRoot
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.0.M1")
        classpath 'com.google.guava:guava:19.0'
        classpath 'org.apache.commons:commons-math:2.0'
        classpath 'ca.cutterslade.gradle:gradle-dependency-analyze:1.3.0'
        //classpath 'gradle.plugin.io.pry.gradle.offline_dependencies:gradle-offline-dependencies-plugin:0.5.0'
        classpath 'com.dimaslanjaka:gradle-plugin:0.6.8'
        classpath 'ca.cutterslade.gradle:gradle-dependency-analyze:1.4.2'
        classpath 'io.openliberty.tools:liberty-gradle-plugin:3.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:3.0.3'
    }
}

allprojects {
    userHome = new File(System.properties['user.home'].toString())
    reposDir = new File(userHome, '.m2/repository')
    ext {
        offlineRepositoryRoot = reposDir.absolutePath

        def today = new Date()
        def base = '3'

        // We use the current year (double digit) and substract 16. We first released Focus in
        // 2017 so this value will start counting at 1 and increment by one every year.
        def year = String.valueOf((new SimpleDateFormat('yy').format(today) as int) - 16)

        // We use the day in the Year (e.g. 248) as opposed to month + day (0510) because it's one digit shorter.
        // If needed we pad with zeros (e.g. 25 -> 025)
        def day = String.format('%03d', (new SimpleDateFormat('D').format(today) as int))

        // We append the hour in day (24h) and minute in hour (7:26 pm -> 1926). We do not append
        // seconds. This assumes that we do not need to build multiple release(!) builds the same
        // minute.
        def time = new SimpleDateFormat('HHmm').format(today)

        generatedVersionCode = (base + year + day + time) as int
        generatedConsentVersionCode = (base + year + day) as int

        success("Version Code with time : $generatedVersionCode")
        success("Version Code without time : $generatedConsentVersionCode")

        offlineDependencies = {
            repositories {
                maven { url 'https://maven.google.com' }
                jcenter()
                mavenCentral()
                mavenLocal()
                maven { url 'https://maven.mozilla.org/maven2/' }
                mavenLocal()
                maven { url 'https://jitpack.io' }
                maven { url 'https://plugins.gradle.org/m2/' }
                maven { url 'http://maven.springframework.org/release' }
                maven { url 'http://maven.restlet.org' }
                gradlePluginPortal()
                maven { url 'https://repo.gradle.org/gradle/libs-releases' }
                maven {
                    userHome = new File(System.properties['user.home'].toString())
                    reposDir = new File(userHome, '.m2/repository')
                    if (!reposDir.exists()) reposDir.mkdirs()
                    offlineRepositoryRoot = reposDir.absolutePath
                    url offlineRepositoryRoot
                }
            }

            includeSources = true
            includeJavadocs = true
            includePoms = true
            includeIvyXmls = true
            includeBuildscriptDependencies = true
        }
    }

    buildscript {
        repositories {
            maven { url 'https://repo.gradle.org/gradle/libs-releases' }
            maven { url 'https://maven.google.com' }
            jcenter()
            mavenCentral()
            mavenLocal()
            maven { url 'https://maven.mozilla.org/maven2/' }
            mavenLocal()
            maven { url 'https://jitpack.io' }
            maven { url 'https://plugins.gradle.org/m2/' }
            maven { url 'http://maven.springframework.org/release' }
            maven { url 'http://maven.restlet.org' }
            gradlePluginPortal()
            maven { url 'https://repo.gradle.org/gradle/libs-releases' }
            maven { url offlineRepositoryRoot }

            for (repo in repos) {
                // android studio offline support
                maven {
                    name = "injected_offline_${repo.name}"
                    url = repo.toURI().toURL()
                }
                // default
                maven {
                    name = repo.name
                    url = repo.toURI().toURL()
                }
            }
        }
    }

    repositories {
        maven { url 'https://maven.google.com' }
        jcenter()
        mavenCentral()
        mavenLocal()
        maven { url 'https://maven.mozilla.org/maven2/' }
        maven { url 'https://jitpack.io' }
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'http://maven.springframework.org/release' }
        maven { url 'http://maven.restlet.org' }
        gradlePluginPortal()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
        maven { url offlineRepositoryRoot }

        for (repo in repos) {
            // android studio offline support
            maven {
                name = "injected_offline_${repo.name}"
                url = repo.toURI().toURL()
            }
            // default
            maven {
                name = repo.name
                url = repo.toURI().toURL()
            }
        }
    }

    //apply plugin: com.dimaslanjaka.offline.OfflineDependenciesPlugin
    //apply plugin: io.pry.gradle.offline_dependencies.OfflineDependenciesPlugin

    userHome = new File(System.properties['user.home'].toString())
    reposDir = new File(userHome, '.m2/repository')
    if (!reposDir.exists()) reposDir.mkdirs()
    offlineRepositoryRoot = reposDir.absolutePath
    offlineDependencies {
        repositories {
            maven { url 'https://maven.google.com' }
            jcenter()
            mavenCentral()
            mavenLocal()
            maven { url 'https://maven.mozilla.org/maven2/' }
            maven { url 'https://jitpack.io' }
            maven { url 'https://plugins.gradle.org/m2/' }
            maven { url 'http://maven.springframework.org/release' }
            maven { url 'http://maven.restlet.org' }
            gradlePluginPortal()
            maven { url "https://repo.spring.io/snapshot" }
            maven { url "https://repo.spring.io/milestone" }
            maven { url 'https://repo.gradle.org/gradle/libs-releases' }
            maven {
                userHome = new File(System.properties['user.home'].toString())
                reposDir = new File(userHome, '.m2/repository')
                if (!reposDir.exists()) reposDir.mkdirs()
                offlineRepositoryRoot = reposDir.absolutePath
                url offlineRepositoryRoot
            }
        }

        includeSources = true
        includeJavadocs = true
        includePoms = true
        includeIvyXmls = true
        includeBuildscriptDependencies = true
    }

    task showRepos {
        doLast {
            println "All repos:"
            println repositories.collect { it.name }
        }
    }

    if (tasks.findByName("updateOfflineRepository") != null) {
        if (tasks.findByName("classes") != null) tasks.findByName("classes").finalizedBy("updateOfflineRepository")
        if (tasks.findByName("clean") != null) tasks.findByName("clean").finalizedBy("updateOfflineRepository")
    }

    /*
    gradle.taskGraph.beforeTask {
        Task task ->
            warn("Running ${task.name}")
            //warn("Project Root: ${rootProject.absoluteProjectPath()}")
    }

    gradle.taskGraph.afterTask {
        Task task, TaskState state ->
            if (state.failure) {
                error("$task.name FAILED")
            } else {
                success("$task.name SUCCESSFULL")
            }
    }
     */

    /*
    gradle.taskGraph.whenReady { taskGraph ->
        println "Tasks"
        taskGraph.getAllTasks().eachWithIndex { task, n ->
            println "${n + 1} $task"
            task.dependsOn.eachWithIndex { depObj, m ->
                println "  ${m + 1} $depObj"
            }
        }
    }
     */
}

enum ConsoleColors {
    // Reset
    RESET("\033[0m"),  // Text Reset

    // Regular Colors
    BLACK("\033[0;30m"),   // BLACK
    RED("\033[0;31m"),     // RED
    GREEN("\033[0;32m"),   // GREEN
    YELLOW("\033[0;33m"),  // YELLOW
    BLUE("\033[0;34m"),    // BLUE
    PURPLE("\033[0;35m"),  // PURPLE
    CYAN("\033[0;36m"),    // CYAN
    WHITE("\033[0;37m"),   // WHITE

    // Bold
    ONLY_BOLD("\033[1m"),      // ONLY BOLD
    BLACK_BOLD("\033[1;30m"),  // BLACK
    RED_BOLD("\033[1;31m"),    // RED
    GREEN_BOLD("\033[1;32m"),  // GREEN
    YELLOW_BOLD("\033[1;33m"), // YELLOW
    BLUE_BOLD("\033[1;34m"),   // BLUE
    PURPLE_BOLD("\033[1;35m"), // PURPLE
    CYAN_BOLD("\033[1;36m"),   // CYAN
    WHITE_BOLD("\033[1;37m"),  // WHITE

    // Underline
    ONLY_UNDERLINED("\033[4m"),      // ONLY UNDERLINED
    BLACK_UNDERLINED("\033[4;30m"),  // BLACK
    RED_UNDERLINED("\033[4;31m"),    // RED
    GREEN_UNDERLINED("\033[4;32m"),  // GREEN
    YELLOW_UNDERLINED("\033[4;33m"), // YELLOW
    BLUE_UNDERLINED("\033[4;34m"),   // BLUE
    PURPLE_UNDERLINED("\033[4;35m"), // PURPLE
    CYAN_UNDERLINED("\033[4;36m"),   // CYAN
    WHITE_UNDERLINED("\033[4;37m"),  // WHITE

    // High Intensity
    BLACK_BRIGHT("\033[0;90m"),  // BLACK
    RED_BRIGHT("\033[0;91m"),    // RED
    GREEN_BRIGHT("\033[0;92m"),  // GREEN
    YELLOW_BRIGHT("\033[0;93m"), // YELLOW
    BLUE_BRIGHT("\033[0;94m"),   // BLUE
    PURPLE_BRIGHT("\033[0;95m"), // PURPLE
    CYAN_BRIGHT("\033[0;96m"),   // CYAN
    WHITE_BRIGHT("\033[0;97m"),  // WHITE

    // Bold High Intensity
    BLACK_BOLD_BRIGHT("\033[1;90m"), // BLACK
    RED_BOLD_BRIGHT("\033[1;91m"),   // RED
    GREEN_BOLD_BRIGHT("\033[1;92m"), // GREEN
    YELLOW_BOLD_BRIGHT("\033[1;93m"),// YELLOW
    BLUE_BOLD_BRIGHT("\033[1;94m"),  // BLUE
    PURPLE_BOLD_BRIGHT("\033[1;95m"),// PURPLE
    CYAN_BOLD_BRIGHT("\033[1;96m"),  // CYAN
    WHITE_BOLD_BRIGHT("\033[1;97m"); // WHITE

    String code

    ConsoleColors(String code) {
        this.code = code
    }

    static String bold(String message) {
        return ONLY_BOLD.code + message + RESET.code
    }

    static String underline(String message) {
        return ONLY_UNDERLINED.code + message + RESET.code
    }

    static String styler(ConsoleColors color, String message) {
        return color.code + message + RESET.code
    }

    static void error(String messages) {
        println(styler(RED, messages))
    }

    static void success(String messages) {
        println(styler(GREEN, messages))
    }

    static void warning(String messages) {
        println(styler(YELLOW, messages))
    }

    static void cyan(String messages) {
        println(styler(CYAN_BRIGHT, messages))
    }
}
