package com.dimaslanjaka.init

import com.android.ddmlib.Log
import com.dimaslanjaka.gradle.utils.ConsoleColors
import org.apache.commons.net.ftp.FTP
import org.apache.commons.net.ftp.FTPClient
import org.apache.commons.net.ftp.FTPClientConfig
import org.apache.commons.net.ftp.FTPReply
import org.gradle.api.Project

class UploadFTP {
    static Project project
    static File buildDir

    static void upload(Project p, String host, String port, String user, String pass, String remoteDir) {
        project = p
        buildDir = p.buildDir
        p.task("uploadJars") {
            // TODO: Upload Generated Artifact To FTP
            doLast {
                println("Start Uploading Artifact To FTP Server")
                FTPClient ftp = new FTPClient()
                FTPClientConfig config = new FTPClientConfig()
                config.setServerTimeZoneId("Asia/Jakarta")
                ftp.configure(config)
                boolean error = false
                try {
                    int reply
                    ftp.connect(host)
                    ftp.login(user, pass)

                    System.out.println("Connected to " + host + ".")
                    System.out.print(ftp.getReplyString())

                    // After connection attempt, you should check the reply code to verify
                    // success.
                    reply = ftp.getReplyCode()

                    if (!FTPReply.isPositiveCompletion(reply)) { // disconnect
                        ftp.disconnect()
                        System.err.println("FTP server refused connection.")
                        System.exit(1)
                    }

                    if (ftp.isConnected() && ftp.isAvailable()) {
                        if (FTPReply.isPositiveCompletion(reply)) {
                            String group2path = project.getGroup().toString().replace(".", "/")
                            String projectFTPVersion = project["version"]
                            ftp.makeDirectory(remoteDir)
                            ftp.changeWorkingDirectory(remoteDir)
                            println("Current Dir " + ftp.printWorkingDirectory())

                            ftp.setControlKeepAliveTimeout(300) // set timeout to 5 minutes
                            ftp.setFileType(FTP.BINARY_FILE_TYPE, FTP.BINARY_FILE_TYPE)
                            ftp.setFileTransferMode(FTP.BINARY_FILE_TYPE)
                            new File("${project.buildDir.absolutePath}/libs").eachFile {
                                if (it.name.contains(projectFTPVersion)) {
                                    boolean upload = false
                                    try {
                                        FileInputStream fis = new FileInputStream(it.absolutePath)
                                        ftp.setFileType(FTP.BINARY_FILE_TYPE)
                                        ftp.enterLocalPassiveMode() //Switch to passive mode
                                        upload = ftp.storeFile(it.name, fis)
                                        fis.close()
                                    }
                                    catch (Exception e) {
                                        println(e.message)
                                    } finally {
                                        reply = ftp.getReplyCode()
                                        if (FTPReply.isPositiveCompletion(reply) && upload) {
                                            println("${it.name} uploaded sucessfully")
                                        } else {
                                            println("${it.name} upload failed")
                                        }
                                    }
                                }
                            }
                        }
                    }
                    // transfer files
                    ftp.logout()
                } catch (IOException e) {
                    error = true
                    println(e.message)
                } finally {
                    if (ftp.isConnected()) {
                        try {
                            ftp.disconnect()
                        } catch (IOException ioe) {
                            println(ioe.getMessage())
                        }
                    }
                }
                if (error) {
                    ConsoleColors.error("error while uploading")
                }
            }
        }
        p.tasks.findByName("publishPlugins").finalizedBy("uploadJars")
    }
}
