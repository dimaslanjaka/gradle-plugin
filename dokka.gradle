/*
 * Copyright 2018 Vorlonsoft LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'base'
}
/**
 * <p>EasyDokkaPlugin Gradle Script plugin</p>
 * <p>Plugin to generate documentation by Dokka documentation engine
 * in Javadoc or other formats for Java, Kotlin, Android and non-Android
 * projects. It's very easy, you don't need to add to dependencies
 * section additional classpath or think about compatibility issues,
 * you don't need additional repositories also.</p>
 *
 * @since 1.0.0 Tokyo
 * @version 1.1.0 Yokohama
 * @author Alexander Savin
 */

Class EasyDokka = new GroovyClassLoader(getClass().getClassLoader()).parseClass(EasyDokkaInitializer.downloadGroovyClass('https://raw.github.com/Vorlonsoft/EasyDokkaPlugin/master/EasyDokka.groovy', 'com.dimaslanjaka.init.EasyDokka.groovy'))
Class EasyDokkaUtils = new GroovyClassLoader(getClass().getClassLoader()).parseClass(EasyDokkaInitializer.downloadGroovyClass('https://raw.github.com/Vorlonsoft/EasyDokkaPlugin/master/EasyDokkaUtils.groovy', 'com.dimaslanjaka.init.EasyDokkaUtils.groovy'))

afterEvaluate { project ->
    final boolean androidOs = EasyDokkaUtils.with(project).isAndroid()
    final boolean kotlinLanguage = EasyDokkaUtils.with(project).isKotlin()
    final String dokkaFatJarVersion = EasyDokka.with(project).getDokkaFatJarVersion()
    final String dokkaFatJarPath = 'org/jetbrains/dokka/dokka-fatjar'
    final String dokkaOutputFormat = EasyDokka.with(project).getDokkaOutputFormat()
    final String javaAPISpecificationLink = EasyDokkaUtils.getJavaAPISpecificationLink(JavaVersion.current().toString())

    task easyDokkaInitializer {
        EasyDokkaUtils.downloadLib("https://jcenter.bintray.com/${dokkaFatJarPath}/${dokkaFatJarVersion}/dokka-fatjar-${dokkaFatJarVersion}.pom",
                dokkaFatJarPath, dokkaFatJarVersion, "dokka-fatjar-${dokkaFatJarVersion}.pom")
        EasyDokkaUtils.downloadLib("https://jcenter.bintray.com/${dokkaFatJarPath}/${dokkaFatJarVersion}/dokka-fatjar-${dokkaFatJarVersion}.jar",
                dokkaFatJarPath, dokkaFatJarVersion, "dokka-fatjar-${dokkaFatJarVersion}.jar")
    }

    task dokkaJavadocsJar(type: GradleBuild) {
        description 'Generates the documentation by Dokka in Javadoc or other formats.'
        tasks = ['clean', 'easyDokkaJar']
    }

    task easyDokka(type: Exec, dependsOn: easyDokkaInitializer) {
        description 'Generates the documentation by Dokka.'
        final byte srcDirsJavaNumber
        final byte srcDirsKotlinNumber
        final byte classpathNumber
        final String classpath
        final String srcDirOne
        final String srcDirTwo
        final String srcDirThree
        String links
        if (androidOs) {
            srcDirsJavaNumber = (byte) ((android.sourceSets.main.java.srcDirs != null) ? android.sourceSets.main.java.srcDirs.size() : 0)
            srcDirsKotlinNumber = (byte) ((kotlinLanguage && (android.sourceSets.main.kotlin.srcDirs != null)) ? android.sourceSets.main.kotlin.srcDirs.size() : 0)
            classpathNumber = (byte) ((android.getBootClasspath() != null) ? android.getBootClasspath().size() : 0)
            classpath = (classpathNumber > 0) ? android.getBootClasspath()[0] : ''
            srcDirOne = (srcDirsJavaNumber > 0) ? android.sourceSets.main.java.srcDirs[0] : ''
            srcDirTwo = (srcDirsJavaNumber > 1) ? android.sourceSets.main.java.srcDirs[1] : ''
            srcDirThree = (srcDirsKotlinNumber > 0) ? android.sourceSets.main.kotlin.srcDirs[0] : ''
            links = 'https://developer.android.com/reference/^https://developer.android.com/reference/package-list^^' +
                    "file:///${android.sdkDirectory}/docs/reference/^file:///${android.sdkDirectory}/docs/reference/package-list^^" +
                    "${javaAPISpecificationLink}^${javaAPISpecificationLink}"
            if (javaAPISpecificationLink == 'https://docs.oracle.com/javase/10/docs/api/') {
                links += 'element-list'
            } else {
                links += 'package-list'
            }
            if (srcDirsJavaNumber > 0) {
                mkdir android.sourceSets.main.java.srcDirs[0]
                if (srcDirsJavaNumber > 1) {
                    mkdir android.sourceSets.main.java.srcDirs[1]
                }
            }
            if (srcDirsKotlinNumber > 0) {
                mkdir android.sourceSets.main.kotlin.srcDirs[0]
            }
        } else {
            srcDirsJavaNumber = (byte) ((sourceSets.main.java.srcDirs != null) ? sourceSets.main.java.srcDirs.size() : 0)
            srcDirsKotlinNumber = (byte) ((kotlinLanguage && (sourceSets.main.kotlin.srcDirs != null)) ? sourceSets.main.kotlin.srcDirs.size() : 0)
            classpathNumber = 0
            classpath = ''
            srcDirOne = (srcDirsJavaNumber > 0) ? sourceSets.main.java.srcDirs[0] : ''
            srcDirTwo = (srcDirsJavaNumber > 1) ? sourceSets.main.java.srcDirs[1] : ''
            srcDirThree = (srcDirsKotlinNumber > 0) ? sourceSets.main.kotlin.srcDirs[0] : ''
            links = javaAPISpecificationLink
            if (srcDirsJavaNumber > 0) {
                mkdir sourceSets.main.java.srcDirs[0]
                if (srcDirsJavaNumber > 1) {
                    mkdir sourceSets.main.java.srcDirs[1]
                }
            }
            if (srcDirsKotlinNumber > 0) {
                mkdir sourceSets.main.kotlin.srcDirs[0]
            }
        }
        if (srcDirsJavaNumber + srcDirsKotlinNumber > 0) {
            commandLine 'java', '-jar',
                    "${System.properties['user.home']}/.m2/repository/${dokkaFatJarPath}/${dokkaFatJarVersion}/dokka-fatjar-${dokkaFatJarVersion}.jar",
                    srcDirOne, srcDirTwo, srcDirThree, '-output', "${buildDir}/${dokkaOutputFormat}", '-format', dokkaOutputFormat, '-links', links,
                    (classpathNumber > 0) ? '-classpath' : '', (classpathNumber > 0) ? classpath : ''
        } else {
            commandLine 'java', '-jar',
                    "${System.properties['user.home']}/.m2/repository/${dokkaFatJarPath}/${dokkaFatJarVersion}/dokka-fatjar-${dokkaFatJarVersion}.jar"
        }
    }

    task easyDokkaJar(type: Jar, dependsOn: easyDokka) {
        description 'Archives the documentation created by Dokka.'
        classifier = dokkaOutputFormat
        destinationDir = buildDir
        from "${buildDir}/${dokkaOutputFormat}"
    }
}

/**
 * <p>EasyDokkaInitializer Class - class with EasyDokkaPlugin Gradle Script plugin initializers.</p>
 *
 * @since 1.1.0 Yokohama
 * @version 1.1.0 Yokohama
 * @author Alexander Savin
 */
final class EasyDokkaInitializer {

    private EasyDokkaInitializer() {
        throw new AssertionError()
    }

    /**
     * Downloads Groovy Class source file
     *
     * @param url Groovy Class source file url
     * @param name Groovy Class source file local repository name
     * @return Groovy Class source file
     */
    static File downloadGroovyClass(String url, String name) {
        File file = new File("${System.properties['user.home']}/.m2/repository/com/vorlonsoft/EasyDokkaPlugin/${name}")
        file.parentFile.mkdirs()
        if (file.exists()) {
            file.delete()
        }
        new URL(url).withInputStream { downloadStream ->
            file.withOutputStream { fileOutputStream ->
                fileOutputStream << downloadStream
            }
        }
        return file
    }
}