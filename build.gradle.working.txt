buildscript {
    repositories {
        google()
        mavenCentral()
        mavenLocal()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "http://dl.bintray.com/davideas/maven" }
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
        //flatDir name: 'build-libs', dirs: "/build/libs"
        //flatDir name: 'libs', dirs: "/libs"
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.11.0"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.3.4.RELEASE"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.10.RELEASE"
        classpath "com.android.tools.build:gradle:4.0.1"
        //classpath "eu.davidea:grabver:2.0.2"
        //classpath 'com.dimaslanjaka.gradle:offline_dependencies:0.6.7.11.7'
        //classpath fileTree(dir: file("${projectDir.absolutePath}/build/libs").absolutePath, include: ['*.jar'])
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: "com.gradle.plugin-publish"
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
//apply plugin: 'com.dimaslanjaka.gradle'

def versionProps = new Properties()
file("version.properties").withInputStream { versionProps.load(it) }
def props = new Properties()
file("gradle.properties").withInputStream { props.load(it) }

def versiTetap = { ->
    return generatedConsentVersionCode
}
def versiAuto = { ->
    return generatedVersionCode
}
def getDescription = { ->
    return props['POM_DESCRIPTION']
}
def getGroupId = { ->
    return props['GROUP']
}
def getVersionName = { ->
    //return "${props['VERSION_NAME']}.${versiTetap()}.${versioning.code}"
    //return "${versioning.major}.${versioning.minor}.${versioning.patch}.${versioning.build}${versioning.code}"
    return "0.0.0"
}
def getArtificatId = { ->
    return props['POM_ARTIFACT_ID']
}
def getProjectName = { ->
    return props['POM_NAME']
}

group = "com.dimaslanjaka.gradle.offline_dependencies"
version = getVersionName()
description = getDescription()

//println "Project Version : $getVersionName"

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url 'https://repo.gradle.org/gradle/libs-releases' }
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://repo.spring.io/milestone" }
}

ext {
    projectDisplayName = props['POM_NAME']
    mavenVersion = '3.6.3'
    jarjarVersion = '1.2.1'
    jarname = "gradle-plugin-${getVersion()}.jar"
    thirdpartyLibsDir = "$project.rootDir/build/libs/".replace("\\", "/")
    repackagedLibsDir = "$project.rootDir/build/repackaged/".replace("\\", "/")
}

def getJarLocation = {
    return "$thirdpartyLibsDir$jarname".replace("\\", "/")
}

//println(getJarLocation())

configurations {
    thirdparty
    jarjar
    providedRuntime
    providedRuntimeOnly
    [apiElements, runtimeElements].each {
        it.outgoing.artifacts.removeIf { it.buildDependencies.getDependencies(null).contains(jar) }
        it.outgoing.artifact(bootJar)
    }
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()

    //implementation fileTree(thirdpartyLibsDir)
    implementation fileTree(repackagedLibsDir)
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    jarjar "org.gradle.jarjar:jarjar:$jarjarVersion"
    thirdparty "org.apache.maven:maven-model-builder:$mavenVersion"
    implementation 'nu.studer:java-ordered-properties:1.0.2'

    testImplementation gradleTestKit()
    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

task repackageDependencies(type: Jar) {
    archivesBaseName = 'gradle-plugin-repackaged'
    version = project.version
    destinationDirectory = new File(repackagedLibsDir as String)

    doLast {
        project.ant {
            taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask", classpath: configurations.jarjar.asPath
            jarjar(destfile: archivePath) {
                configurations.thirdparty.each { originalJar ->
                    zipfileset(src: originalJar)
                }
                rule(pattern: 'org.**', result: "com.dimaslanjaka.gradle.repackaged.org.@1")
                rule(pattern: 'com.**', result: "com.dimaslanjaka.gradle.repackaged.com.@1")
                rule(pattern: 'licenses.**', result: "com.dimaslanjaka.gradle.repackaged.licenses.@1")
            }
        }
    }
}

compileJava.dependsOn 'repackageDependencies'
tasks.findByName("clean").finalizedBy("classes")
tasks.findByName("classes").finalizedBy("assemble")
tasks.findByName("assemble").finalizedBy("build")
//tasks.findByName("build").finalizedBy("publish")

jar {
    from(zipTree(repackageDependencies.archivePath)) {
        include '**'
    }

    enabled = true
    baseName = 'gradle-plugin'
    archivesBaseName = 'gradle-plugin'

    manifest {
        attributes(
                'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString(),
                'Implementation-Title': project.description,
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'Dimas Lanjaka'
        )
    }
}

bootJar {
    enabled = false
    mainClassName = 'OfflineDependenciesPlugin'
}

pluginBundle {
    website = props['POM_URL']
    vcsUrl = props['POM_URL']
    description = props['POM_DESCRIPTION']
    tags = ['offline', 'buildscript-dependency', 'buildscript-configurations', 'jar', 'pom', 'reproducible', 'offline-dependencies']

    plugins {
        offlineDependenciesPlugin {
            id = 'com.dimaslanjaka.offline' //getGroupId()
            displayName = 'Offline Gradle Plugin'
            description = 'Save dependencies offline'
        }
        grabverPlugin {
            id = 'com.dimaslanjaka.versioning' //getGroupId()
            displayName = 'Auto Versioning Build'
            description = 'Auto increase version build and code based on gradle tasks'
        }
    }

    mavenCoordinates {
        groupId = 'com.dimaslanjaka' //getGroupId()
        artifactId = 'gradle' //getArtificatId()
        version = getVersionName()
    }
}

def githubProperties = new Properties()
githubProperties.load(new FileInputStream(rootProject.file("github.properties")))

publishing {
    publications {
        bar(MavenPublication) {
            groupId getGroupId()
            artifactId getArtificatId()
            version getVersionName()
            artifact(getJarLocation())
            from(components.java)
        }

        maven(MavenPublication) {
            groupId = getGroupId()
            artifactId = getName()
            version = getVersion()

            from components.java
            artifact file("$thirdpartyLibsDir/$jarname")
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = props['POM_NAME']
                description = props['POM_DESCRIPTION']
                url = props['POM_URL']
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = props['POM_DEVELOPER_ID']
                        name = props['POM_DEVELOPER_NAME']
                        email = props['POM_DEVELOPER_EMAIL']
                    }
                }
                scm {
                    connection = props['POM_SCM_CONNECTION']
                    developerConnection = props['POM_SCM_DEV_CONNECTION']
                    url = props['POM_URL']
                }
            }
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri(githubProperties['gpr.url'])

            credentials {
                username = githubProperties['gpr.usr']
                password = githubProperties['gpr.key']
            }
        }
    }
}

