buildscript {
    repositories {
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("com.gradle.publish:plugin-publish-plugin:0.14.0")
    }
}

apply plugin: "com.gradle.plugin-publish"
apply plugin: "java"
apply plugin: "groovy"

group = "com.dimaslanjaka.gradle.offline_dependencies"
version = projectVersion(project)
description = "Store project dependencies alongside your code for reproducible offline builds"
//println("${project.name} using version ${project.version}")

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.gradle.org/gradle/libs-releases" }
}

ext {
    mavenVersion = "3.6.0"
    jarjarVersion = "1.2.1"

    thirdpartyLibsDir = "$project.projectDir/lib/"
}

configurations {
    thirdparty
    jarjar
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()
    implementation fileTree(thirdpartyLibsDir)
    implementation fileTree(dir: "lib", include: ["*.jar"])
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains:annotations:20.1.0"
    implementation("net.java.dev.jna:jna-platform:5.8.0")

    // thirdparty dependencies and repackaging
    jarjar "org.gradle.jarjar:jarjar:$jarjarVersion"
    thirdparty "org.apache.maven:maven-model-builder:$mavenVersion"

    implementation("com.google.code.gson:gson:2.8.5")
    implementation("org.apache.commons:commons-collections4:latest.release")
    implementation("commons-collections:commons-collections:latest.release")

    // Annotation 
    implementation "javax.annotation:javax.annotation-api:1.3.2"
    // Required if generating JSR-303 annotations
    implementation "javax.validation:validation-api:1.1.0.CR2"
    // Required if generating Jackson 2 annotations
    implementation "com.fasterxml.jackson.core:jackson-databind:2.12.1"
    // Required if generating JodaTime data types
    implementation "joda-time:joda-time:2.2"
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

task repackageDependencies(type: Jar) {
    archivesBaseName = "repackaged-all"
    archiveFileName = "repackaged-all.jar"
    version = project.version
    group = "build"
    destinationDirectory = new File(thirdpartyLibsDir as String)

    doLast {
        project.ant {
            taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask", classpath: configurations.jarjar.asPath
            jarjar(destfile: archivePath) {
                configurations.thirdparty.each { originalJar ->
                    zipfileset(src: originalJar)
                }
                rule(pattern: "groovy**", result: "dimas.groovy.@1")
                rule(pattern: "kotlin**", result: "dimas.kotlin.@1")
                rule(pattern: "org.**", result: "dimas.org.@1")
                rule(pattern: "com.**", result: "dimas.com.@1")
                rule(pattern: "licenses.**", result: "dimas.licenses.@1")
            }
        }
    }
}

compileJava.dependsOn("repackageDependencies")

tasks.withType(Jar).all {
    manifest {
        attributes(
                "Created-By": "${System.properties["java.version"]} (${System.properties["java.vendor"]} ${System.properties["java.vm.version"]})".toString(),
                "Implementation-Title": project.description,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "Dimas Lanjaka"
        )
    }
}

jar {
    from(zipTree(repackageDependencies.archiveFile.get().getAsFile())) {
        include "**"
    }

    archivesBaseName = "offline-dependencies-plugin"
    archiveVersion.set(project.version.toString())
}

task packageWithoutVersion(type: Jar) {
    archiveFileName = "offline-dependencies-plugin.jar"
    from(zipTree(jar.archiveFile.get().getAsFile())) {
        include "**"
    }
    archiveVersion.set(project.version.toString())
    dependsOn(jar)
}

//jar.finalizedBy(packageWithoutVersion)

tasks.findByName("publishPlugins").doLast {
    updateVersion(project)
}

pluginBundle {
    website = "https://github.com/dimaslanjaka/gradle-plugin/tree/composite-build/repo/components"
    vcsUrl = "https://github.com/dimaslanjaka/gradle-plugin/tree/composite-build/repo/components"
    description = project.description
    tags = ["offline", "buildscript-dependency", "buildscript-configurations", "jar", "pom", "reproducible", "offline-dependencies"]

    plugins {
        offlineDependenciesPlugin {
            id = project.group
            displayName = "Gradle Offline Dependencies Plugin"
        }
    }
}

static def projectVersion(Project p, String newVersion = null) {
    File prop = new File(p.projectDir, "version.properties")
    if (!prop.exists()) prop.createNewFile()
    Properties properties = new Properties()
    properties.load(new FileReader(prop))
    if (!properties.containsKey("version") || newVersion != null) {
        properties.setProperty("version", newVersion ?: "1.0.8")
        OutputStream output = new FileOutputStream(prop)
        properties.store(output, null)
    }
    return properties.get("version")
}

static def updateVersion(Project p) {
    def token = p.version.toString().tokenize(".")
    if (token.size() > 0) {
        int minor = token[2].toInteger()
        int major = token[1].toInteger()
        int main = token[0].toInteger()
        // increase minor
        minor = minor + 1
        // if minor has max value, increase major
        if (minor >= Integer.MAX_VALUE) {
            major = major + 1
            minor = 0
        }
        // if major has max value, increase main
        if (major >= Integer.MAX_VALUE) {
            main = main + 1
            major = 0
        }
        projectVersion(p, "$main.$major.$minor")
    }
}